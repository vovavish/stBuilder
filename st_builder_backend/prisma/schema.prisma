// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String?
  username String?
  email    String  @unique

  passwordHash     String
  refreshTokenHash String?

  roles Role[] @default([USER])

  UsersSites UsersSites[]

  @@map("users")
}

model Layouts {
  id            Int    @id @default(autoincrement())
  name          String
  description   String @default("default description")
  path_to_image String @default("1737230908287-767188248.png")
  layout_data   String
  isPublished   Boolean @default(false)
}

model UsersSites {
  id           Int     @id @default(autoincrement())
  user         User    @relation(fields: [user_id], references: [id])
  user_id      Int
  site_name    String
  site_address String? @unique // Общий адрес сайта (например, domen.com)
  pages        Page[]  // Связь с множеством страниц
}

model Page {
  id             Int            @id @default(autoincrement())
  userSite       UsersSites     @relation(fields: [user_site_id], references: [id])
  user_site_id   Int
  page_name      String         // Название страницы (например, "Home", "About")
  page_slug      String         // URL-часть (например, "home", "about")
  page_data      String         
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  publishedPages PublishedPages? // Связь с опубликованной версией (один-к-одному)

  @@unique([user_site_id, page_slug], name: "site_page_slug_unique")
  @@index([user_site_id])
}

model PublishedPages {
  id           Int      @id @default(autoincrement())
  page         Page     @relation(fields: [page_id], references: [id])
  page_id      Int      @unique // Связь с черновиком страницы
  published_data String   // Данные опубликованной версии страницы (HTML, JSON и т.д.)
  publishedAt  DateTime @default(now()) // Дата публикации
}

enum Role {
  USER
  ADMIN
}

model File {
  id        Int      @id @default(autoincrement())
  path      String
  createdAt DateTime @default(now())
}
